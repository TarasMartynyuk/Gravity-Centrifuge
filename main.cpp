#include <iostream>
#include <string>
#include <utility>
#include <vector>
#include <algorithm>
#include <numeric>
#include <cassert>
#include <sstream>
#include <iterator>
#include <bitset>

using namespace std;

// is trivially copyable, does not own the pointers for now
class Landscape {
public:
    Landscape(vector<int>* row_block_counts, vector<int>* col_block_counts)
        : row_block_counts(row_block_counts), col_block_counts(col_block_counts) {
        assert(columnsRowsHaveEqualBlocksCount());
    }

    int rows()const { return row_block_counts->size(); }
    int columns()const { return col_block_counts->size(); }

    // updates row blocks counts to simulate blocks falling to the bottom
    void simulateFall() {
        for (int i = rows() - 1; i >= 0; --i) {
            // how much blocks must the column have
            // so that when blocks fall one will be placed in the ith row
            int thresh = rows() - i;
            int row_blocks = countColumnsWithNotLessBlocksThan(thresh);
            row_block_counts->at(i) = row_blocks;
        }
        assert(columnsRowsHaveEqualBlocksCount());
    }

    // returns the landscape that is created by rotating this by 90 deg counter-clockwise
    // its dims are swapped
    Landscape rollOver()const {
        auto* rotated_col_block_counts = row_block_counts;

        auto* rotated_row_block_counts = new vector<int>(col_block_counts->size());
        for (int i = 0; i < col_block_counts->size(); ++i) {
            int reverse = col_block_counts->size() - 1 - i;
            rotated_row_block_counts->at(reverse) = col_block_counts->at(i);
        }
        return { rotated_row_block_counts, rotated_col_block_counts};
    }

    // outputs the landscape to grid
    // assumes that all the blocks have already fallen to bottom,
    // thus ignores the row_block_counts values
    vector<vector<char>> toGrid()const {
        vector<vector<char>> grid(rows(), vector<char>(columns(), '%'));

        for (int j = 0; j < columns(); ++j) {
            int blocks_for_col = col_block_counts->at(j);
            for (int i = 0; i < rows(); ++i) {
                int row_from_bot = rows() - i;
                char ch = row_from_bot <= blocks_for_col ?
                          '#' : '.';
                grid.at(i).at(j) = ch;
            }
        }
        return grid;
    }


private:
    //TODO: implement proper block count array ownership
    // row : # blocks in that row
    vector<int>* row_block_counts;
    // col : # blocks in that col
    vector<int>* col_block_counts;

    int countColumnsWithNotLessBlocksThan(int thresh) {
        return count_if(col_block_counts->begin(), col_block_counts->end(),
                        [thresh](int blocks) {
                            return blocks >= thresh;
                        });
    }

    bool columnsRowsHaveEqualBlocksCount() {
        return accumulate(row_block_counts->begin(), row_block_counts->end(), int()) ==
               accumulate(col_block_counts->begin(), col_block_counts->end(), int());
    }
};

class LandscapeTumbler {
public:
    LandscapeTumbler(Landscape init_landscape) : init_landscape(init_landscape) {}

    // returns the landscape after the tumblings
    const Landscape& tumble(int times) {
        assert(times > 0);
        return tumble(times % 2 == 0);
    }

    // we can;t handle the 0 tumbles case in this overload
    const Landscape& tumble(bool tumble_count_even) {
        if (odd_state == nullptr) {
            computeOddAndEvenStates();
        }

        return *(tumble_count_even ?
                 even_state : odd_state);
    }

private:
    const Landscape init_landscape;
    // the landscapes produced by tumbling cycle after first two -
    // so every even and odd state are same
    Landscape* odd_state{};
    Landscape* even_state{};
//    Landscape* curr_state{};

    void computeOddAndEvenStates() {
        odd_state = new Landscape(init_landscape.rollOver());
        odd_state->simulateFall();

        even_state = new Landscape(odd_state->rollOver());
        even_state->simulateFall();
    }
};

class CentrifugeSimulator {
public:
    bool total_tumbles_even{true};
    ulong long drive_a_momentum{1};
    ulong long drive_b_momentum{1};

    static const int kPortionSize = 54;

    // interprets the 18 (max even number of full 3-bit pairs that fits into long - one for each oct digit)
    // lowest bits of six_bit_command
    // as a series of commands to centrifuge's drives
    // one command is 2 bits - first for drive A, second for drive B
    void processFullCommandPortion(ulong long commands_portion_number) {
//        assert(hasNoMoreLowestBitsThanCommandPortion(commands_portion_number));
        bitset<kPortionSize> command_portion(commands_portion_number);

        for (int i = 0; i < kPortionSize - 1; i += 2) {
            bool drive_a_tumbles = command_portion.test(i);
            bool drive_b_tumbles = command_portion.test(i + 1);

            ulong long tumbles_performed = operateBothDrives(drive_a_tumbles, drive_b_tumbles);
            recalculateTotalTumblesEven(tumbles_performed);
        }
    }

    // processes command that is less in size than full portion
    void processLeftoverCommandPortion(ulong long commands_portion_number, int bits_left) {
        //TODO: process only part of the bits instead of full portion
        processFullCommandPortion(commands_portion_number);
    }

private:
    ulong long operateBothDrives(bool drive_a_tumbles, bool drive_b_tumbles) {
        ulong long a_tumble_count = operateDrive(drive_a_tumbles, drive_a_momentum, drive_b_momentum);
        ulong long b_tumble_count = operateDrive(drive_b_tumbles, drive_b_momentum, drive_a_momentum);
        return a_tumble_count + b_tumble_count;
    };

    ulong long operateDrive(bool tumbles, ulong long& drive_momentum, ulong long& idle_drive_momentum) {
        idle_drive_momentum += drive_momentum;
        return tumbles ? drive_momentum : 0;
    }

    void recalculateTotalTumblesEven(ulong long tumbles_performed) {
        bool tumble_count_even = tumbles_performed % 2 == 0;
        total_tumbles_even = total_tumbles_even == tumble_count_even;
    }

    // true if the numbers highest set bit is not out of bounds of what
    // a number with bits_per_command_portion bits can represent
    bool hasNoMoreLowestBitsThanCommandPortion(unsigned long number) {
        bitset<55> portion_bound;
        portion_bound.set(portion_bound.size() - 1);

        return portion_bound.to_ulong() > number;
    }
};

bool tumblingsCountEven(const string& centrifuge_command) {
    CentrifugeSimulator centrifuge;
    const int oct_digits_in_command_portion = 6;
    auto full_portions = static_cast<int>(centrifuge_command.size() / oct_digits_in_command_portion);

    auto index = static_cast<int>(full_portions == 0 ?
                                 centrifuge_command.size() : centrifuge_command.size() - 3);

    for (int portion = 0; portion < full_portions; ++portion, index -= 3) {
        assert(index >= 0);

        auto three_oct_digits =  centrifuge_command.substr(index, 3);
        assert(three_oct_digits.size() == 3);

        ulong long three_oct_digits_num = strtoull(three_oct_digits.c_str(), nullptr, 8);
        centrifuge.processFullCommandPortion(three_oct_digits_num);
    }

    // now index is after the last full portion (going right -> left)
    auto portion_leftover = centrifuge_command.substr(0, index);
    ulong long portion_leftover_num = strtoull(portion_leftover.c_str(), nullptr, 8);
    centrifuge.processLeftoverCommandPortion(portion_leftover_num, static_cast<int>(portion_leftover.size() * 3));

    return centrifuge.total_tumbles_even;
}

int main()
{
    //region mock
//    stringstream cin;
//    cin << "53 5\n"
n"
//           "#.....#...#.#.......#...#...#.#.....#...#.#...#.#....\n"
//           "#.....#...#.#.......#...#...#.#..#..#...#.#...#.#....\n"
//           "#.....#...#.#...#...#...#...#.#.##..#...#.#...#.###..\n"
//           "#####.#####.#####.#####.#...#.#####.#####.#...#.#####\n"
//           "#####.#####.#####.#####.#####.#####.#####.#####.#####";
    // stringstream cin;
    // cin << "17 5\n"
    //       "1\n"
    //       ".................\n"
    //       ".................\n"
    //       "...##...###..#...\n"
    //       ".####..#####.###.\n"
    //       "#################";

    //endregion

    int columns;
    int rows;
    cin >> columns >> rows; cin.ignore();
    string centrifuge_command; getline(cin, centrifuge_command);
//    int tumblings_count; cin >> tumblings_count; cin.ignore();

    auto* row_block_counts = new vector<int>(rows, 0);
    auto* col_block_counts = new vector<int>(columns, 0);

    for (int i = 0; i < rows; i++) {
        string tile_row; getline(cin, tile_row);

        for (int j = 0; j < columns; ++j) {
            if(tile_row.at(j) == '#') {
                row_block_counts->at(i)++;
                col_block_counts->at(j)++;
            }
        }
    }
    //endregion

    Landscape init_landscape(row_block_counts, col_block_counts);
    Landscape& result_landscape = init_landscape;
    if(centrifuge_command != "0") {
        LandscapeTumbler tumbler(init_landscape);

        bool tumblings_count_even = tumblingsCountEven(centrifuge_command);

        result_landscape = tumbler.tumble(tumblings_count_even);
    }

    auto landscape_char_grid = result_landscape.toGrid();

    ostream_iterator<char> os_it(cout, "");
    for(auto& row : landscape_char_grid) {
        copy(row.begin(), row.end(), os_it);
        cout << "\n";
    }
}

